Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.guessName = guessName;
exports.installPackages = installPackages;
exports.packagesToInstall = packagesToInstall;

var _atom = require('atom');

'use babel';

var extractionRegex = /Installing (.*?) to .* (.*)/;
var nameRegexes = [/[\\\/]packages[\\\/](.*?)[\\\/]/, /[\\\/]([\w-_]+)[\\\/](?:lib|src)[\\\/]/i, /[\\\/]([\w-_]+)[\\\/][\w-_]+\..+$/];

function guessName(filePath) {
  var matches = undefined;

  matches = nameRegexes[0].exec(filePath);
  if (matches) {
    return matches[1];
  }
  matches = nameRegexes[1].exec(filePath);
  if (matches) {
    return matches[1];
  }
  matches = nameRegexes[2].exec(filePath);
  if (matches) {
    return matches[1];
  }
  return null;
}

function installPackages(dependencies, progressCallback) {
  return new Promise(function (resolve, reject) {
    var errors = [];
    new _atom.BufferedProcess({
      command: atom.packages.getApmPath(),
      args: ['install'].concat(dependencies).concat(['--production', '--color', 'false']),
      options: {},
      stdout: function stdout(contents) {
        var matches = extractionRegex.exec(contents);
        atom.packages.activatePackage(matches[1]);
        if (matches[2] === 'âœ“' || matches[2] === 'done') {
          progressCallback(matches[1], true);
        } else {
          progressCallback(matches[1], false);
          errors.push(contents);
        }
      },
      stderr: function stderr(contents) {
        errors.push(contents);
      },
      exit: function exit() {
        if (errors.length) {
          var error = new Error('Error installing dependencies');
          error.stack = errors.join('');
          reject(error);
        } else resolve();
      }
    });
  });
}

function packagesToInstall(name) {
  var packageInfo = atom.packages.getLoadedPackage(name);

  var toInstall = [],
      toEnable = [];
  (packageInfo ? packageInfo.metadata['package-deps'] ? packageInfo.metadata['package-deps'] : [] : []).forEach(function (name) {
    if (!window.__steelbrain_package_deps.has(name)) {
      window.__steelbrain_package_deps.add(name);
      if (atom.packages.resolvePackagePath(name)) {
        toEnable.push(name);
      } else {
        toInstall.push(name);
      }
    }
  });

  return { toInstall: toInstall, toEnable: toEnable };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3lnZ2RyYXNpbC8uYXRvbS9wYWNrYWdlcy9saW50ZXItcnVieS9ub2RlX21vZHVsZXMvYXRvbS1wYWNrYWdlLWRlcHMvbGliL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztvQkFFOEIsTUFBTTs7QUFGcEMsV0FBVyxDQUFBOztBQUdYLElBQU0sZUFBZSxHQUFHLDZCQUE2QixDQUFBO0FBQ3JELElBQU0sV0FBVyxHQUFHLENBQ2xCLGlDQUFpQyxFQUNqQyx5Q0FBeUMsRUFDekMsbUNBQW1DLENBQ3BDLENBQUE7O0FBRU0sU0FBUyxTQUFTLENBQUMsUUFBUSxFQUFFO0FBQ2xDLE1BQUksT0FBTyxZQUFBLENBQUE7O0FBRVgsU0FBTyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDdkMsTUFBSSxPQUFPLEVBQUU7QUFDWCxXQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUNsQjtBQUNELFNBQU8sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3ZDLE1BQUksT0FBTyxFQUFFO0FBQ1gsV0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDbEI7QUFDRCxTQUFPLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN2QyxNQUFJLE9BQU8sRUFBRTtBQUNYLFdBQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQ2xCO0FBQ0QsU0FBTyxJQUFJLENBQUE7Q0FDWjs7QUFFTSxTQUFTLGVBQWUsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUU7QUFDOUQsU0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFTLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDM0MsUUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBO0FBQ2pCLDhCQUFvQjtBQUNsQixhQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7QUFDbkMsVUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbkYsYUFBTyxFQUFFLEVBQUU7QUFDWCxZQUFNLEVBQUUsZ0JBQVMsUUFBUSxFQUFFO0FBQ3pCLFlBQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDOUMsWUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDekMsWUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLEVBQUU7QUFDL0MsMEJBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQ25DLE1BQU07QUFDTCwwQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDbkMsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7U0FDdEI7T0FDRjtBQUNELFlBQU0sRUFBRSxnQkFBUyxRQUFRLEVBQUU7QUFDekIsY0FBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtPQUN0QjtBQUNELFVBQUksRUFBRSxnQkFBVztBQUNmLFlBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUNqQixjQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFBO0FBQ3hELGVBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUM3QixnQkFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ2QsTUFBTSxPQUFPLEVBQUUsQ0FBQTtPQUNqQjtLQUNGLENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTtDQUNIOztBQUVNLFNBQVMsaUJBQWlCLENBQUMsSUFBSSxFQUFFO0FBQ3RDLE1BQUksV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUE7O0FBRXRELE1BQU0sU0FBUyxHQUFHLEVBQUU7TUFBRSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BDLEdBQUMsV0FBVyxHQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUksRUFBRSxDQUFBLENBQ25HLE9BQU8sQ0FBQyxVQUFTLElBQUksRUFBRTtBQUN0QixRQUFJLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMvQyxZQUFNLENBQUMseUJBQXlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQzFDLFVBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMxQyxnQkFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtPQUNwQixNQUFNO0FBQ0wsaUJBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7T0FDckI7S0FDRjtHQUNGLENBQUMsQ0FBQTs7QUFFSixTQUFPLEVBQUMsU0FBUyxFQUFULFNBQVMsRUFBRSxRQUFRLEVBQVIsUUFBUSxFQUFDLENBQUE7Q0FDN0IiLCJmaWxlIjoiL2hvbWUveWdnZHJhc2lsLy5hdG9tL3BhY2thZ2VzL2xpbnRlci1ydWJ5L25vZGVfbW9kdWxlcy9hdG9tLXBhY2thZ2UtZGVwcy9saWIvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCB7QnVmZmVyZWRQcm9jZXNzfSBmcm9tICdhdG9tJ1xuY29uc3QgZXh0cmFjdGlvblJlZ2V4ID0gL0luc3RhbGxpbmcgKC4qPykgdG8gLiogKC4qKS9cbmNvbnN0IG5hbWVSZWdleGVzID0gW1xuICAvW1xcXFxcXC9dcGFja2FnZXNbXFxcXFxcL10oLio/KVtcXFxcXFwvXS8sXG4gIC9bXFxcXFxcL10oW1xcdy1fXSspW1xcXFxcXC9dKD86bGlifHNyYylbXFxcXFxcL10vaSxcbiAgL1tcXFxcXFwvXShbXFx3LV9dKylbXFxcXFxcL11bXFx3LV9dK1xcLi4rJC9cbl1cblxuZXhwb3J0IGZ1bmN0aW9uIGd1ZXNzTmFtZShmaWxlUGF0aCkge1xuICBsZXQgbWF0Y2hlc1xuXG4gIG1hdGNoZXMgPSBuYW1lUmVnZXhlc1swXS5leGVjKGZpbGVQYXRoKVxuICBpZiAobWF0Y2hlcykge1xuICAgIHJldHVybiBtYXRjaGVzWzFdXG4gIH1cbiAgbWF0Y2hlcyA9IG5hbWVSZWdleGVzWzFdLmV4ZWMoZmlsZVBhdGgpXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNbMV1cbiAgfVxuICBtYXRjaGVzID0gbmFtZVJlZ2V4ZXNbMl0uZXhlYyhmaWxlUGF0aClcbiAgaWYgKG1hdGNoZXMpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1sxXVxuICB9XG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsUGFja2FnZXMoZGVwZW5kZW5jaWVzLCBwcm9ncmVzc0NhbGxiYWNrKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBlcnJvcnMgPSBbXVxuICAgIG5ldyBCdWZmZXJlZFByb2Nlc3Moe1xuICAgICAgY29tbWFuZDogYXRvbS5wYWNrYWdlcy5nZXRBcG1QYXRoKCksXG4gICAgICBhcmdzOiBbJ2luc3RhbGwnXS5jb25jYXQoZGVwZW5kZW5jaWVzKS5jb25jYXQoWyctLXByb2R1Y3Rpb24nLCAnLS1jb2xvcicsICdmYWxzZSddKSxcbiAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgc3Rkb3V0OiBmdW5jdGlvbihjb250ZW50cykge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gZXh0cmFjdGlvblJlZ2V4LmV4ZWMoY29udGVudHMpXG4gICAgICAgIGF0b20ucGFja2FnZXMuYWN0aXZhdGVQYWNrYWdlKG1hdGNoZXNbMV0pXG4gICAgICAgIGlmIChtYXRjaGVzWzJdID09PSAn4pyTJyB8fCBtYXRjaGVzWzJdID09PSAnZG9uZScpIHtcbiAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKG1hdGNoZXNbMV0sIHRydWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayhtYXRjaGVzWzFdLCBmYWxzZSlcbiAgICAgICAgICBlcnJvcnMucHVzaChjb250ZW50cylcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHN0ZGVycjogZnVuY3Rpb24oY29udGVudHMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goY29udGVudHMpXG4gICAgICB9LFxuICAgICAgZXhpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0Vycm9yIGluc3RhbGxpbmcgZGVwZW5kZW5jaWVzJylcbiAgICAgICAgICBlcnJvci5zdGFjayA9IGVycm9ycy5qb2luKCcnKVxuICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgfSBlbHNlIHJlc29sdmUoKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWNrYWdlc1RvSW5zdGFsbChuYW1lKSB7XG4gIGxldCBwYWNrYWdlSW5mbyA9IGF0b20ucGFja2FnZXMuZ2V0TG9hZGVkUGFja2FnZShuYW1lKVxuXG4gIGNvbnN0IHRvSW5zdGFsbCA9IFtdLCB0b0VuYWJsZSA9IFtdO1xuICAocGFja2FnZUluZm8gPyAocGFja2FnZUluZm8ubWV0YWRhdGFbJ3BhY2thZ2UtZGVwcyddID8gcGFja2FnZUluZm8ubWV0YWRhdGFbJ3BhY2thZ2UtZGVwcyddIDogW10pIDogW10pXG4gICAgLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKCF3aW5kb3cuX19zdGVlbGJyYWluX3BhY2thZ2VfZGVwcy5oYXMobmFtZSkpIHtcbiAgICAgICAgd2luZG93Ll9fc3RlZWxicmFpbl9wYWNrYWdlX2RlcHMuYWRkKG5hbWUpXG4gICAgICAgIGlmIChhdG9tLnBhY2thZ2VzLnJlc29sdmVQYWNrYWdlUGF0aChuYW1lKSkge1xuICAgICAgICAgIHRvRW5hYmxlLnB1c2gobmFtZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b0luc3RhbGwucHVzaChuYW1lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICByZXR1cm4ge3RvSW5zdGFsbCwgdG9FbmFibGV9XG59XG4iXX0=
//# sourceURL=/home/yggdrasil/.atom/packages/linter-ruby/node_modules/atom-package-deps/lib/helpers.js
